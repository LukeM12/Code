YUI.add("photoList-models",function(e){function t(e){t.superclass.constructor.call(this,e)}e.Models[this.name]=t,e.extend(t,e.FlickrModelRegistry,{langBundles:this.details.langBundles,name:this.name,attributes:{displayType:{readOnly:!0,defaultValue:"photo list"},title:{readOnly:!0,defaultFn:function(e){return this.intlMessage({intlName:"models.PHOTO_LIST"})}},url:{readOnly:!0,defaultFn:function(e){return""}},urlSuffix:{readOnly:!0,defaultFn:function(e){return"photolist-"+e}},photoContextList:{isListProxy:!0,contextFetch:{listFetcher:e.ListFetchers["flickr-photoList-getContext"],listItemIdField:"photoId"}}}})},"@VERSION@",{requires:["flickr-model-registry","flickr-promise","flickr-photoList-getContext-fetcher"],langBundles:["models"]});
YUI.add("flickr-photoList-getContext-fetcher",function(e){"use strict";function t(t){var n={photo_id:t.photoId,photolist_id:t.id,num_prev:t.numPrev,num_next:t.numNext,extras:e.APIHelper.request.getRebootPhotoExtras()};return n}function n(t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=[],l=[],c,h=s.proxy(n.photoId),p,d,v,m,g,y=[];return p=r.prevphotos,c=r.nextphotos,l=e.APIHelper.response.parsePhotos({photos:c.photo,personModelRegistry:o,photoModelRegistry:s,photoEngagementModelRegistry:u,photoStatsModelRegistry:a}),f=e.APIHelper.response.parsePhotos({photos:p.photo,personModelRegistry:o,photoModelRegistry:s,photoEngagementModelRegistry:u,photoStatsModelRegistry:a}),g=i.getValue(n.id,"photoContextList"),v=g.hasMinBoundary?g.hasMinBoundary():!1,m=g.hasMaxBoundary?g.hasMaxBoundary():!1,d=g.getList(),y=e.APIHelper.response.addOrReplaceListByContext({model:h,next:l,prev:f.reverse(),current:d,hasMin:v,hasMax:m,numNext:n.numNext,numPrev:n.numPrev}),i.setValue(n.id,"photoContextList",y),{next:l,previous:f.reverse()}}function r(t,n){var r=this;return e.Promise.all([n.callAPI("flickr.photolist.getContext",this._processParams(t),!0),n.getModelRegistry("photoList-models"),n.getModelRegistry("photo-models"),n.getModelRegistry("person-models"),n.getModelRegistry("photo-engagement-models"),n.getModelRegistry("photo-stats-models")]).then(function(e){return r._processResponse(e,t)},function(e){throw n[e.fatal?"error":"debug"]("[flickr-photoList-getContext-fetcher] failed getting or processing API response:",e),e.code===1&&e.message==="Photo not in list"&&(e.notInContext=!0),e})}e.namespace("ListFetchers")["flickr-photoList-getContext"]={run:r,_processParams:t,_processResponse:n}},"@VERSION@",{requires:["flickr-promise","api-helper"],optional:["photoList-models","photo-models","photo-engagement-models","photo-stats-models"]});
